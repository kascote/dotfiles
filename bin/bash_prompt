#!/bin/bash

default_username='nelson'

SFG='\x1b[38;2;'
SBG='\x1b[48;2;'


set_prompts() {

  sbg()
  {
      printf "$SFG"'%d;%d;%dm' "$1" "$2" "$3"
  }

  rst()
  {
      echo -en "\x1b[0m\n"
  }

  black=$(sbg 0x66 0x5c 0x54)
  red=$(sbg 0xfb 0x49 0x34)
  green=$(sbg 0xb8 0xbb 0x26)
  yellow=$(sbg 0xfa 0xbd 0x2f)
  blue=$(sbg 0x07 0x66 0x78)
  magenta=$(sbg 0xd3 0x86 0x9b)
  cyan=$(sbg 0x83 0xa5 0x98)
  white=$(sbg 0xd5 0xc4 0xa1)
  orange=$(sbg 0xfe 0x80 0x19)
  purple=$(sbg 0x8f 0x3f 0x71)

  function usernamehost() {
    if [ "$USER" == "$default_username" ]; then
      return
    fi

    if [[ "${USER}" == *"root" ]]; then
        userStyle="${red}";
    else
        userStyle="${magenta}";
    fi;

    userhost=""
    #userhost+="\[${userStyle}\]$USER "
    userhost+="${userStyle}$USER"
    userhost+="${black}@"
    userhost+="${orange}$HOSTNAME "
    userhost+="${black}in"
    echo "$userhost" "";
  }

  function prompt_git() {
    # check if we're in a git repo. (fast)
    git rev-parse --is-inside-work-tree &>/dev/null || return
    # check for what branch we're on. (fast)
    #   if… HEAD isn’t a symbolic ref (typical branch),
    #   then… get a tracking remote branch or tag
    #   otherwise… get the short SHA for the latest commit
    #   lastly just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        #git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";
    #dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e "*")
    dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --cached --exit-code || echo -e "*" )
    # Check for unstaged changes.
    unstaged=$(git diff-files --quiet --ignore-submodules --exit-code || echo -e "!")
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
      untracked="?";
    fi;
    if $(git rev-parse --verify refs/stash &>/dev/null); then
      staged='$';
    fi;

    [ -n "${s}" ] && s=" [${s}]";
    echo -e "${1}${branchName}${2}$dirty$unstaged$untracked$staged";

    return
  }

  # Prompt string
  PS1="\[\033]0;\w\007\]"                                 # terminal title (set to the current working directory)
  PS1+="\n\[$bold\]"
  PS1+="\[$(usernamehost)\]"                              # username at host
  PS1+="\[$yellow\]\w"                                    # working directory
  PS1+="\$(prompt_git \"$black on $green\" \"$cyan\")"    # git repository details
  PS1+="\n"
  PS1+="\[$reset$black\]\\$ \[$reset$white\]"
  export PS1
  # Subshell prompt string
  export PS2="→ " #"⚡ "
  # Debug prompt string  (when using `set -x`)
  # When debugging a shell script via `set -x` this tricked-out prompt is used.
  # The first character (+) is used and repeated for stack depth
  # Then, we log the current time, filename and line number, followed by function name, followed by actual source line
  # FWIW, I have spent hours attempting to get time-per-command in here, but it's not possible. ~paul
  export PS4='+ \011\e[1;30m\t\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'
}

# set cursor color
echo -ne '\e]12;red\a'

set_prompts
unset set_prompts

