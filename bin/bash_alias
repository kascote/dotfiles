platform=`uname`
###########
# GENERAL #
###########
#export TERM=xterm-256color
# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
  colorflag="--color"
else # OS X `ls`
  colorflag="-G"
fi

alias l="ls -lh ${colorflag}"
alias la="ls -alh ${colorflag}"              # l for list style, a for all including hidden, h for human readable file sizes
alias lo="ls -otlh ${colorflag}"             # order by time
alias l.="ls -d ${colorflag} .*"             # show only dirs
# List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'""'"
alias h='history'                            # shortcut for history
alias c='clear'                              # shortcut to clear your terminal
alias ..='cd ..'                             # move up 1 dir
alias ...='cd ../..'                         # move up 2 dirs
alias ....='cd ../../..'                     # move up 3 dirs
alias .....='cd ../../../..'                 # move up 4 dirs
alias rbash='source ~/bin/bash_alias'        # after editing you have to source it for the new stuff to work
alias reload='source ~/.bashrc'
alias ducks='du -cksh * | sort -rn|head -11' # Lists folders and files sizes in the current folder
alias du1='du -h --max-depth=1'
alias grep='grep --color=auto'
# Shows most used commands, cool script I got this from: http://lifehacker.com/software/how-to/turbocharge-your-terminal-274317.php
alias profileme="history | awk '{print \$2}' | awk 'BEGIN{FS=\"|\"}{print \$1}' | sort | uniq -c | sort -n | tail -n 20 | sort -nr"
#alias apti="aptitude -F \"%p %V %v\" search "  # show the instaled version and the available one
alias apti="aptitude -F \"%c%a%M%S %p %d %Z %v %V\" search "  # show the instaled version and the available one
#alias ps="ps wwwax -o user,pid,ppid,cpu,nice,state,command"
alias psgrep='ps aux | grep -v grep | grep -i -e VSZ -e'
alias le='less -fir'
#search on history.... ![number] to execute command on history
alias go='gnome-open'
alias gn='find . -iname'
# show web traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump='sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E "Host\: .*|GET \/.*"'
alias hd='od -Ax -tx1z -v'                  # hex dump
# Use vim to browse man pages. One can use Ctrl-[ and Ctrl-t
# to browse and return from referenced man pages. ZZ or q to quit.
# Note initially within vim, one can goto the man page for the
# word under the cursor by using [section_number]K.
# Note we use bash explicitly here to support process substitution
# which in turn suppresses the "Vim: Reading from stdin..." warning.
# http://www.pixelbeat.org/settings/.bashrc
#export MANPAGER='bash -c "vim -MRn -c \"set ft=man nomod nolist nospell nonu\" -c \"nm q :qa!<CR>\" -c \"nm <end> G\" -c \"nm <home> gg\"</dev/tty <(col -b)"'

#alias gvim='/Applications/MacVim.app/Contents/MacOS/Vim -g'
alias http_here='python -c "import SimpleHTTPServer;SimpleHTTPServer.test()"'
alias rhttp='ruby -rrack -e "include Rack;Handler::Thin.run( Builder.new{run(Directory.new(\"\"))}, :Port => 8000)"'
alias whttp='ruby -run -e httpd . -p5000'
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias myip2='curl http://ipecho.net/plain; echo'
alias localip="ipconfig getifaddr en1"
alias timestamp="date +%Y%m%d%H%M%S"
# Recursively delete `.DS_Store` files
alias clean-dsstore="find . -type f -name '*.DS_Store' -ls -delete"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'
alias flushcache='dscacheutil -flushcache && killall -HUP mDNSResponder'
# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip'

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
  alias "$method"="lwp-request -m '$method'"
done

alias e="/Applications/Emacs.app/Contents/MacOS/Emacs &"

# --------[ Rails ]-----------------------------------------------------------------
alias tlog='tail -f log/development.log'
alias rst='touch tmp/restart.txt'
alias rr='rake routes | grep '

# --------[virtualbox]------------------
alias vbs="VBoxHeadless -v off -s "


# --------[ GIT ]-----------------------------------------------------------------
alias gw="git whatchanged -p"
alias gl="git log --graph"
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias git-score="git log | grep '^Author' | sort | uniq -ci | sort -r"
alias gdiff='git diff | vimdiff -'

export HISTCONTROL=ignoredups
# Maximum number of events saved between sessions
export HISTFILESIZE=100000
# Maximum number of events saved during a session
export HISTSIZE=100000
export EDITOR='vim'  #Command line
export SVN_EDITOR='${EDITOR}'
export PAGER='less -firwX'
#export MANPAGER='less -firwX'
export MANPAGER='less -X'
#color man pages
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

# bash completion settings (actually, these are readline settings)
bind "set completion-ignore-case on" # note: bind used instead of sticking these in .inputrc
bind "set bell-style none"
bind "set show-all-if-ambiguous On"

# shell options
shopt -s no_empty_cmd_completion >/dev/null 2>&1
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob
# Append to the Bash history file, rather than overwriting it
shopt -s histappend
# Autocorrect typos in path names when using `cd`
shopt -s cdspell

set -o vi
# enable support for eight bits characters
set meta-flag on
set input-meta on
set output-meta on
# no convert output to ascii, use eight bits
set convert-meta off

if [[ $platform == 'Darwin' ]]; then
  #. ~/bin/colors
  eval `dircolors ~/bin/colors_db`
elif [[ $platform == 'Linux' ]]; then
  eval `dircolors ~/bin/colors_db`
fi

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}
# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  echo # newline
}

#function sf()
#{
#  svn st | grep \? | sed '/images\/[0-9]\+$/d' | sed '/\.swp/d'
#}
function hf()
{
  history | grep "$@"
}
# git diff is using vimdif... this function is to get original git diff functionality
function git_diff() {
  git diff --no-ext-diff -w "$@" | vim -R -
}
# find user with open ports
findportuser() {
  lsof -i :"$1"
}

# $1 = type; 0 - both, 1 - tab, 2 - title
# rest = text
setTerminalText () {
    # echo works in bash & zsh
    local mode=$1 ; shift
    echo -ne "\033]$mode;$@\007"
}
stt_both  () { setTerminalText 0 $@; }
stt_tab   () { setTerminalText 1 $@; }
stt_title () { setTerminalText 2 $@; }

SSH_COMPLETE=( $(cat ~/.ssh/known_hosts | \
  cut -f 1 -d ' ' | \
  sed -e s/,.*//g | \
  uniq | \
  egrep -v [0123456789]) )
complete -o default -W "${SSH_COMPLETE[*]}" ssh scp

# taked from http://github.com/mikewest/homedir/blob/master/etc/bash/rc/git
function git_status_prompt {
   git rev-parse --git-dir &> /dev/null
   [ $? -ne 0 ] && return
   git_status="$(git status 2> /dev/null)"
   branch_pattern="^On branch ([^${IFS}]*)"
   if [[ ! ${git_status} =~ "working directory clean" ]]; then
       state="⚡ "
   fi
   if [[ ${git_status} =~ "# Your branch is (.*) of" ]]; then
       if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
           remote="↑ "
       else
           remote="↓ "
       fi
   fi
   if [[ ${git_status} =~ "# Unmerged paths:" ]]; then
     remote="[conflict] "
   fi
   if [[ ${git_status} =~ "# Your branch and (.*) have diverged" ]]; then
       remote="↕ "
   fi
   if [[ ${git_status} =~ ${branch_pattern} ]]; then
       branch="(${BASH_REMATCH[1]}) "
       # [ "$branch" = "(master) " ] && branch=''
       echo "${branch}${remote}${state}"
   else
       if [[ ${git_status} =~ "Not currently on any branch." ]]; then
         echo "(no branch) ${remote}${state}"
       fi
   fi
}
GIT_STATUS='$(git_status_prompt)'

. ~/bin/bash_prompt3

