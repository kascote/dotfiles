
Pry.config.editor               = "mvim --nofork"
#Pry.config.pager = false
Pry.config.color                = true
Pry.config.history.should_save  = true
Pry.config.should_load_local_rc = Dir.pwd != Dir.home

Pry.config.ls.separator              = "\n" # new lines between methods
Pry.config.ls.heading_color          = :magenta
Pry.config.ls.public_method_color    = :green
Pry.config.ls.protected_method_color = :yellow
Pry.config.ls.private_method_color   = :bright_red


# pry debugger
if defined?(PryByebug)
  Pry.commands.alias_command 'cc', 'continue'
  Pry.commands.alias_command 'ss', 'step'
  Pry.commands.alias_command 'nn', 'next'
  Pry.commands.alias_command 'ff', 'finish'
end


if Readline::VERSION =~ /editline/i
  warn "Warning: Using Editline instead of Readline."
end

begin
  require 'awesome_print'
  # The following line enables awesome_print for all pry output,
  # and it also enables paging
  Pry.config.print = proc {|output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output)}

  # If you want awesome_print without automatic pagination, use the line below
  # Pry.config.print = proc { |output, value| output.puts value.ai }
rescue LoadError => err
  puts "gem install awesome_print  # <-- highly recommended"
end


# wrap ANSI codes so Readline knows where the prompt ends
def colour(name, text)
  if Pry.color
    "\001#{Pry::Helpers::Text.send name, '{text}'}\002".sub '{text}', "\002#{text}\001"
  else
    text
  end
end


Pry.config.prompt = [
  proc { |target_self, nest_level, pry|
    prompt = colour :bright_black, "#{RUBY_VERSION} - #{Pry.view_clip(target_self)}"
    prompt += ":#{nest_level}" if nest_level > 0
    prompt += colour :cyan, ' Â» '
  },
  proc { |target_self, nest_level, pry|
    colour :red, '?> '
  }
]

org_logger_active_record=nil
org_logger_rails=nil

Pry.hooks.add_hook :before_session, :rails do |output, target, pry|
  # show ActiveRecord SQL queries in the console
  if defined? ActiveRecord
    org_logger_active_record = ActiveRecord::Base.logger
    ActiveRecord::Base.logger = Logger.new STDOUT
  end

  if defined?(Rails) && Rails.env
    # output all other log info such as deprecation warnings to the console
    if Rails.respond_to? :logger=
      org_logger_rails = Rails.logger
      Rails.logger = Logger.new STDOUT
    end
  end
end

Pry.hooks.add_hook :after_session, :rails do |output, target, pry|
  ActiveRecord::Base.logger = org_logger_active_record if org_logger_active_record
  Rails.logger = org_logger_rails if org_logger_rails
end

# coding:utf-8 vim:ft=ruby
